import pytest
import os

from config import read_subscribe_config_from_env

from create_subscription_and_update_ssm import ensure_subscribed
from delete_subscription import delete_subscription
from read_subscription import read_subscription



def in_gocd():
    print("You must be connected to opentest vpn to run these tests")
    return os.getenv('GO_PIPELINE_NAME') is not None


@pytest.mark.skipif(condition=in_gocd(), reason='currently connection to opentest and NEMS only working from local laptop')
def test_that_a_subscription_is_created_if_none_already_exists():
    non_existent_subscription_id = '00000000000000000000000000000005'
    config = read_subscribe_config_from_env()

    config.nems_subscription_id = non_existent_subscription_id

    result = ensure_subscribed(config=config)

    assert result == non_existent_subscription_id

# this test exists so that we can trigger DELETE and validation reports
@pytest.mark.skipif(condition=in_gocd(), reason='currently connection to opentest and NEMS only working from local laptop')
def test_delete_subscription():
    config = read_subscribe_config_from_env()

    config.nems_subscription_id = '00000000000000000000000000000000'

    result = delete_subscription(config=config)

    assert result.status_code == 200


@pytest.mark.skipif(condition=in_gocd(), reason='currently connection to opentest and NEMS only working from local laptop')
def test_read_subscription():
    config = read_subscribe_config_from_env()

    config.nems_subscription_id = '00000000000000000000000000000000'

    result = read_subscription(config=config)

    assert result == 200
