#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
IMAGE_REPO_NAME=deductions/mesh-forwarder
export NHS_SERVICE=deductions/prm-deductions-mesh-forwarder
AWS_HELPERS_VERSION=0.2.9
echo "AWS helper scripts version: $AWS_HELPERS_VERSION"

# Do not change the file name as the aws helper scripts depend on it
AWS_HELPERS_FILE="utils/$AWS_HELPERS_VERSION/aws-helpers"

mkdir -p "utils/$AWS_HELPERS_VERSION"
if [[ ! -f $AWS_HELPERS_FILE ]]; then
  wget --quiet -O $AWS_HELPERS_FILE https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${AWS_HELPERS_VERSION}/aws-helpers
fi
chmod +x $AWS_HELPERS_FILE
source $AWS_HELPERS_FILE

####################################
# Instance (Environment) Variables #
####################################

function check_env() {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_nhs_service() {
  if [[ -z "${NHS_SERVICE}" ]]; then
    echo "Must set NHS_SERVICE"
    exit 1
  fi
}

function set_image_tag() {
  export IMAGE_TAG=$(git rev-parse HEAD | cut -c 1-8)
}

function get_authorisation() {
  check_env
  export SHARED_SECRET=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/mesh-mailbox-shared-secret")
  export MAIL_BOX_ID=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/mesh-mailbox-id")
  export MAIL_BOX_PASS=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/mesh-mailbox-password")
}

function get_aws_account_id() {
  AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
}

#######################
# Terraform Functions #
#######################

function tf_init() {
  check_env
  #  Condition [ $NHS_ENVIRONMENT == "test" ] is required as test environment infrastructure is deployed in CI AWS account
  [ $NHS_ENVIRONMENT == "ci" ] || [ $NHS_ENVIRONMENT == "test" ] && bucket_env_infix="" || bucket_env_infix="$NHS_ENVIRONMENT-"

  cd terraform

  terraform init -reconfigure \
    -backend-config key="${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate" \
    -backend-config bucket="prm-deductions-${bucket_env_infix}terraform-state" \
    -backend-config dynamodb_table="prm-deductions-${bucket_env_infix}terraform-table" \
    -backend-config region=${AWS_DEFAULT_REGION}
}

function tf_plan() {
  operation=$1
  certs=$2
  set_image_tag
  TARGET=""

  if [[ "${certs}" == "true" ]]; then
    TARGET="-target=aws_acm_certificate.mesh-forwarder-cert"
  fi

  tf_init
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars $TARGET -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply() {
  tf_init
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json >tf-out.json
}

############################
# Docker Related Functions #
############################

function get_aws_account_id() {
  AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
}

function docker_login() {
  echo Logging in to Amazon ECR...
  eval $(dojo -c Dojofile-infra "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function configure_docker_repository_uri() {
  set_image_tag
  docker_login
  get_aws_account_id
  export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$IMAGE_REPO_NAME
}

function retag_image() {
  docker_login
  SRC_IMAGE_NAME_AND_TAG="327778747031.dkr.ecr.eu-west-2.amazonaws.com/registrations/mesh-inbox-s3-forwarder:${IMAGE_TAG}"
  docker pull "$SRC_IMAGE_NAME_AND_TAG"
  get_aws_account_id
  IMAGE_FULL_URL="${AWS_ACCOUNT_ID}.dkr.ecr.eu-west-2.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
  docker tag "$SRC_IMAGE_NAME_AND_TAG" "$IMAGE_FULL_URL"
  docker push "$IMAGE_FULL_URL"
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
tf)
  check_env
  dojo -c Dojofile-infra "bash"
  ;;
_tf_plan_certs)
  _assume_environment_role $NHS_ENVIRONMENT
  tf_plan "$2" true
  ;;
tf_plan_certs)
  check_env
  dojo -c Dojofile-infra "./tasks _tf_plan_certs $2"
  ;;
_tf_plan)
  _assume_environment_role $NHS_ENVIRONMENT
  tf_plan "$2"
  ;;
tf_plan)
  check_env
  dojo -c Dojofile-infra "./tasks _tf_plan $2"
  ;;
_tf_apply)
  _assume_environment_role $NHS_ENVIRONMENT
  tf_apply
  ;;
tf_apply)
  check_env
  dojo -c Dojofile-infra "./tasks _tf_apply"
  ;;
_get_authorisation_token)
  _assume_environment_role $NHS_ENVIRONMENT
  get_authorisation
  python auth-creation.py $SHARED_SECRET $MAIL_BOX_ID $MAIL_BOX_PASS
  ;;
get_authorisation_token)
  check_env
  dojo -c Dojofile-infra "./tasks _get_authorisation_token"
  ;;
promote_docker_image)
  check_env
  set_image_tag
  promote_docker_image "$IMAGE_REPO_NAME:$IMAGE_TAG" "$NHS_ENVIRONMENT"
  ;;
_wait_ecs)
  _assume_environment_role $NHS_ENVIRONMENT
  aws ecs wait services-stable \
    --region $AWS_DEFAULT_REGION \
    --cluster $NHS_ENVIRONMENT-${NHS_SERVICE}-ecs-cluster \
    --services $NHS_ENVIRONMENT-mesh-forwarder-service
  ;;
wait_ecs)
  check_env
  dojo -c Dojofile-infra "./tasks _wait_ecs"
  ;;
_retag_image)
  if [ -z $IMAGE_TAG ]; then
    echo "Please set IMAGE_TAG environment variable"
    exit 1
  fi
  ;;
publish-docker)
  configure_docker_repository_uri
  if [ -z $IMAGE_TAG ]; then
    echo "Please set IMAGE_TAG environment variable"
    exit 1
  fi
  docker build -t ${REPOSITORY_URI}:latest -t ${REPOSITORY_URI}:${IMAGE_TAG} .
  eval $(docker_login)
  docker push ${REPOSITORY_URI}:${IMAGE_TAG}
  ;;
*)
  echo "Invalid command: '${command}'"
  exit 1
  ;;
esac
set +e
