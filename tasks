#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
IMAGE_REPO_NAME=deductions/mesh-forwarder
export NHS_SERVICE=mesh-forwarder
AWS_HELPERS_VERSION=0.2.17
echo "AWS helper scripts version: $AWS_HELPERS_VERSION"

# Do not change the file name as the aws helper scripts depend on it
AWS_HELPERS_FILE="utils/$AWS_HELPERS_VERSION/aws-helpers"

mkdir -p "utils/$AWS_HELPERS_VERSION"
if [[ ! -f $AWS_HELPERS_FILE ]]; then
  wget --quiet -O $AWS_HELPERS_FILE https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${AWS_HELPERS_VERSION}/aws-helpers
fi
chmod +x $AWS_HELPERS_FILE
source $AWS_HELPERS_FILE

####################################
# Instance (Environment) Variables #
####################################

function check_env() {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_nhs_service() {
  if [[ -z "${NHS_SERVICE}" ]]; then
    echo "Must set NHS_SERVICE"
    exit 1
  fi
}

function set_image_tag() {
  export IMAGE_TAG="$(echo $1)"

  echo "setting image tag $IMAGE_TAG"
}

function get_authorisation() {
  check_env
  export SHARED_SECRET=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/mesh-mailbox-shared-secret")
  export MAIL_BOX_ID=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/mesh-mailbox-id")
  export MAIL_BOX_PASS=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/mesh-mailbox-password")
}

function get_subscriptions_env() {
      check_env
      export OUR_ASID=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/nems-subscription-asid")
      export OUR_ODS_CODE=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/nems-subscription-ods-code")
      export NEMS_URL=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/nems-subscription-url")
      export MESH_MAILBOX_ID=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/mesh-mailbox-id")
      export NEMS_SUBSCRIPTION_ID=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/nems-subscription-id")

}

function get_local_tkw_subscriptions_env() {
      export OUR_ASID='918999198820'
      export OUR_ODS_CODE='A91720'
      export NEMS_URL='http://192.168.128.14:8080'
      export MESH_MAILBOX_ID='A91720OT001'
      export NEMS_SUBSCRIPTION_ID='00000000000000000000000000000000'
}

function set_nems_env() {
    if [[ -z "${NHS_ENVIRONMENT}" ]]; then
     get_local_tkw_subscriptions_env
    else
     get_subscriptions_env
    fi
    pushd nems-subscriber && pip3 install -r requirements.txt
}

function setup_venv {
  venv_directory=venv
  echo "Using this directory for venv: ${venv_directory}"
  python3 -m venv "${venv_directory}"
  source "${venv_directory}"/bin/activate
}

function get_aws_account_id() {
  AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
}

#######################
# Terraform Functions #
#######################

function tf_init() {
  check_env

  cd terraform

  terraform init -reconfigure \
    -backend-config key="${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate" \
    -backend-config bucket="prm-deductions-${NHS_ENVIRONMENT}-terraform-state" \
    -backend-config dynamodb_table="prm-deductions-${NHS_ENVIRONMENT}-terraform-table" \
    -backend-config region=${AWS_DEFAULT_REGION}
}

function tf_plan() {
  operation=$1
  certs=$2
  TARGET=""

  echo "Image tag is ${IMAGE_TAG}"

  if [[ "${certs}" == "true" ]]; then
    TARGET="-target=aws_acm_certificate.mesh-forwarder-cert"
  fi

  tf_init
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var task_image_tag="$IMAGE_TAG" -var-file=$NHS_ENVIRONMENT.tfvars $TARGET -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply() {
  tf_init
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json >tf-out.json
}

############################
# Docker Related Functions #
############################

function get_aws_account_id() {
  AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
}

function docker_login() {
  echo Logging in to Amazon ECR...
  eval $(dojo -c Dojofile-infra "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function configure_docker_repository_uri() {
  docker_login
  get_aws_account_id
  export REPOSITORY_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME"
}

function push_registrations_forwarder_image_to_repo_ecr() {
  get_aws_account_id
  configure_docker_repository_uri
  SRC_IMAGE_NAME_AND_TAG="${AWS_ACCOUNT_ID}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/registrations/mesh-inbox-s3-forwarder:${IMAGE_TAG}"
  docker pull "$SRC_IMAGE_NAME_AND_TAG"
  IMAGE_FULL_URL="${REPOSITORY_URI}:${IMAGE_TAG}"
  docker tag "$SRC_IMAGE_NAME_AND_TAG" "$IMAGE_FULL_URL"
  docker push "$IMAGE_FULL_URL"
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  tf)
    check_env
    dojo -c Dojofile-infra "bash"
    ;;
  _tf_plan_certs)
    _assume_environment_role $NHS_ENVIRONMENT
    tf_plan "$2" true
    ;;
  tf_plan_certs)
    check_env
    dojo -c Dojofile-infra "./tasks _tf_plan_certs $2"
    ;;
  _tf_plan)
    _assume_environment_role $NHS_ENVIRONMENT
    set_image_tag "$IMAGE_TAG"
    tf_plan "$2" "$IMAGE_TAG"
    ;;
  tf_plan)
    check_env
    dojo -c Dojofile-infra "./tasks _tf_plan $2"
    ;;
  _tf_apply)
    _assume_environment_role $NHS_ENVIRONMENT
    tf_apply
    ;;
  tf_apply)
    check_env
    dojo -c Dojofile-infra "./tasks _tf_apply"
    ;;
  _get_authorisation_token)
    _assume_environment_role $NHS_ENVIRONMENT
    get_authorisation
    python3 auth-creation.py $SHARED_SECRET $MAIL_BOX_ID $MAIL_BOX_PASS
    ;;
  get_authorisation_token)
    check_env
    dojo -c Dojofile-infra "./tasks _get_authorisation_token"
    ;;
  _create_nems_subscription_and_update_ssm)
    set_nems_env
    python3 create_subscription_and_update_ssm.py
    echo Successfully processed subscription
    ;;
  create_nems_subscription_and_update_ssm)
    dojo -c Dojofile-python "./tasks _create_nems_subscription_and_update_ssm"
    ;;
  _test_nems_subscriber)
    get_local_tkw_subscriptions_env
    pushd nems-subscriber && pip3 install -r requirements.txt && python3 -m pytest --capture=no
    ;;
  test_nems_subscriber)
    dojo -c Dojofile-python "./tasks _test_nems_subscriber"
    ;;
  _create_nems_subscription)
    set_nems_env
    python3 create_subscription.py
    ;;
  create_nems_subscription)
    dojo -c Dojofile-python "./tasks _create_nems_subscription"
    ;;
  _read_nems_subscription)
    set_nems_env
    python3 read_subscription.py
    ;;
  read_nems_subscription)
    dojo -c Dojofile-python "./tasks _read_nems_subscription"
    ;;
  _delete_nems_subscription)
    set_nems_env
    python3 delete_subscription.py
    ;;
  delete_nems_subscription)
    dojo -c Dojofile-python "./tasks _delete_nems_subscription"
    ;;
  promote_docker_image)
    check_env
    promote_docker_image "$IMAGE_REPO_NAME:$IMAGE_TAG" "$NHS_ENVIRONMENT"
    ;;
  _venv)
    setup_venv
    ;;
  _wait_ecs)
    _assume_environment_role $NHS_ENVIRONMENT
    aws ecs wait services-stable \
      --region $AWS_DEFAULT_REGION \
      --cluster $NHS_ENVIRONMENT-${NHS_SERVICE}-ecs-cluster \
      --services $NHS_ENVIRONMENT-mesh-forwarder-service
    ;;
  wait_ecs)
    check_env
    dojo -c Dojofile-infra "./tasks _wait_ecs"
    ;;
  _push_registrations_forwarder_image_to_repo_ecr)
    if [ -z $IMAGE_TAG ]; then
      echo "Please set IMAGE_TAG environment variable"
      exit 1
    fi
    push_registrations_forwarder_image_to_repo_ecr
    ;;
  *)
    echo "Invalid command: '${command}'"
    exit 1
    ;;
esac
set +e
